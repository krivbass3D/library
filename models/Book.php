<?php

namespace app\models;

use Yii;
use yii\data\Pagination;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "book".
 *
 * @property int $id
 * @property string|null $title
 * @property string|null $description
 * @property string|null $image
 * @property string|null $date
 *
 * @property BookAuthor[] $bookAuthors
 */
class Book extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'book';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['title'], 'required'],
            [['title','description'],'string'],
            [['date'],'date','format'=>'php:Y-m-d']
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Title',
            'description' => 'Description',
            'image' => 'Image',
            'date' => 'Date',
        ];
    }

    /**
     * Gets query for [[BookAuthors]].
     *
     * @return \yii\db\ActiveQuery
     */
    public function getBookAuthors()
    {
        return $this->hasMany(BookAuthor::className(), ['book_id' => 'id']);
    }

    public function saveImag($filename)
    {
        $this->image = $filename;
        return $this->save(false);
    }

    public function getImage()
    {
        return ($this->image) ? '/uploads/' . $this->image : '/no-image.png';
    }

    public function deleteImage()
    {
        $imageUploadModel = new ImageUpLoad();
        $imageUploadModel->deleteCurrentImage($this->image);
    }

    public function beforeDelete()
    {
        $this->deleteImage();
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public function getAuthors()
    {
        return $this->hasMany(Author::className(), ['id' => 'author_id'])
            ->viaTable('book_author', ['book_id' => 'id']);
    }

    public function getSelectedAuthors()
    {
        $selectedAuthors = $this->getAuthors()->select('id')->asArray()->all();
        return ArrayHelper::getColumn($selectedAuthors,'id');
    }

    public function saveAuthors($authors)
    {
        if(is_array($authors))
        {
            $this->clearCurrentAuthors();
            foreach ($authors as $author_id)
            {
                $author = Author::findOne($author_id);
                $this->link('authors',$author);
            }
        }
    }

    public function clearCurrentAuthors()
    {
        BookAuthor::deleteAll(['book_id'=>$this->id]);
    }

    public static function getAll($pageSize = 5)
    {
        // build a DB query to get all articles with status = 1
        $query = Book::find();

        // get the total number of articles (but do not fetch the article data yet)
        $count = $query->count();

        // create a pagination object with the total count
        $pagination = new Pagination(['totalCount' => $count, 'pageSize'=>$pageSize]);

        // limit the query using the pagination and retrieve the articles
        $books = $query->offset($pagination->offset)
            ->limit($pagination->limit)
            ->all();

        $data['books'] = $books;
        $data['pagination'] = $pagination;

        return $data;
    }

}
